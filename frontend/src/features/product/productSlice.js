import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fecthAllCategories, fecthAllProducts,fecthProductsByFilters,fecthAllBrands, fecthProductById, createProduct, updateProduct } from './ProductApi';

const initialState = {
  products: [],
  categories: [],
  brands : [],
  status: 'idle',
  totalItems : 0,
  selectedProduct : null
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const fecthProductByIdAsync = createAsyncThunk(
  'product/fecthProductByIdAsync',
  async (id) => {
    const response = await fecthProductById(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const createProductAsync = createAsyncThunk(
  'product/createProductAsync',
  async (product) => {
    const response = await createProduct(product);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const updateProductAsync = createAsyncThunk(
  'product/updateProductAsync',
  async (product) => {
    const response = await updateProduct(product);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fecthProductsByFiltersAsync = createAsyncThunk(
  'product/fecthProductsByFilters',
  async ({filter,sort,pagination,isAdmin=false}) => {
    const response = await fecthProductsByFilters({filter,sort,pagination,isAdmin});
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fecthCategoriesAsync = createAsyncThunk(
  'product/fecthCategoriesAsync',
  async () => {
    const response = await fecthAllCategories();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const fecthBrandsAsync = createAsyncThunk(
  'product/fecthBrandsAsync',
  async () => {
    const response = await fecthAllBrands();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const productSlice = createSlice({
  name: 'product',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearSelectedProduct: (state) => {
      state.selectedProduct = null;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fecthProductsByFiltersAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fecthProductsByFiltersAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        const {products,totalItems} = action.payload;
        state.products = products;
        state.totalItems = totalItems;
      })
      .addCase(fecthCategoriesAsync.fulfilled, (state, action) => {
        state.categories = action.payload;
      })
      .addCase(fecthBrandsAsync.fulfilled, (state, action) => {
        state.brands = action.payload;
      })
      .addCase(fecthProductByIdAsync.pending, (state, action) => {
        state.status = 'loading';
      })
      .addCase(fecthProductByIdAsync.fulfilled, (state, action) => {
        state.selectedProduct = action.payload;
      })
      .addCase(createProductAsync.pending, (state, action) => {
        state.status = 'loading';
      })
      .addCase(createProductAsync.fulfilled, (state, action) => {
        state.products.push(action.payload);
      })
      .addCase(updateProductAsync.pending, (state, action) => {
        state.status = 'loading';
      })
      .addCase(updateProductAsync.fulfilled, (state, action) => {
        const product_id = action.payload.id;
        const product_index = state.products.findIndex((product)=>product.id===product_id);
        state.products.splice(product_index,1,action.payload);
      })
  },
});

export const { clearSelectedProduct} = productSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAllProducts = (state) => state.product.products;
export const selectTotalItems = (state) => state.product.totalItems;
export const selectAllCategories = (state) => state.product.categories;
export const selectAllBrands = (state) => state.product.brands;
export const selectProductById = (state) => state.product.selectedProduct;

export default productSlice.reducer;
